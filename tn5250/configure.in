dnl ** Process this file with autoconf to produce a configure script.
AC_INIT
AC_CONFIG_SRCDIR([src/tn5250.c])
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

dnl * Templates for autoheader
AH_TEMPLATE([SOCKET_TYPE], [Define to your system's socket descriptor type.])
AH_TEMPLATE([USE_CURSES], [Define this to use the -lncurses or -lcurses support.])
AH_TEMPLATE([USE_SLANG], [Define this to use the -lslang support.])
AH_TEMPLATE([attr_t], [Define this to 'int' if your curses doesn't typedef attr_t])
AH_TEMPLATE([USE_OWN_KEY_PARSING], [Define this to use the new key handler.])
AH_TEMPLATE([BINARY_RELEASE], [Define this when creating a binary distribution])
AH_TEMPLATE([NETSHARE400], [Define this when building the special Netshare400 edition])

dnl * Checks for programs.
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AM_PROG_LIBTOOL

dnl ** Automake Intialization
AM_INIT_AUTOMAKE(tn5250, 0.17.3)
AM_CONFIG_HEADER(src/tn5250-config.h)
AC_ARG_ENABLE(old-keys,
[  --enable-old-keys       Use the old key handler, which has some quirks
                          but might be more complete.],,[
  AC_DEFINE_UNQUOTED(USE_OWN_KEY_PARSING,1)
])

dnl **************************************************************************
dnl * Python interface support.						     *
dnl **************************************************************************

AC_PATH_PROG(PYTHON,python,no)
if test x$PYTHON != xno ; then
  AC_MSG_CHECKING(for python prefix)
  PYTHON_PREFIX="`$PYTHON -c 'import sys; print sys.exec_prefix' 2>&5`"
  AC_SUBST(PYTHON_PREFIX)
  AC_MSG_RESULT($PYTHON_PREFIX)

  AC_MSG_CHECKING(for python version)
  PYTHON_VERSION="`$PYTHON -c 'import sys; print sys.version[[:3]]' 2>&5`"
  AC_SUBST(PYTHON_VERSION)
  AC_MSG_RESULT($PYTHON_VERSION)
fi

dnl *
dnl * Enable the python interface if we have everything we need to enable it
dnl * or if the user has explicitly told us to.
dnl *
AC_ARG_ENABLE(python,
[  --enable-python         Enable python language support.],
[ if test x$enable_python = xyes ; then
    if test x$PYTHON = xno ; then
      AC_MSG_ERROR(** --enable-python specified and python binary not found **)
    fi
  fi
  PYTHON_CFLAGS="-I$PYTHON_PREFIX/include/python$PYTHON_VERSION"
],[
  enable_python=no
  PYTHON_CFLAGS=" "
])
AC_SUBST(PYTHON_CFLAGS)
AC_MSG_CHECKING(for whether to enable python support)
AM_CONDITIONAL(PYTHON, test x$enable_python = xyes)
AC_MSG_RESULT($enable_python)

AC_PATH_PROG(DIALOG,dialog,no)
if test x$DIALOG = xno ; then
	AC_PATH_PROG(DIALOG,whiptail,no)
fi
AC_SUBST(DIALOG)

dnl **
dnl ** Check for screen interface libraries.  There are a few posibilities here:
dnl ** -lncurses, -lcurses, -lslang.  -lslang is only checked for if the 
dnl ** --with-slang option is passed to ./configure
dnl **
dnl ** Under (at least) some BSDs, both curses and ncurses is installed.  In that
dnl ** case, we prefer ncurses, and must use <ncurses.h>
dnl **
AC_ARG_WITH(slang,[  --with-slang            use the S/Lang library for screen management.],[
if test "$with_slang" != "no"
then
	USE_SLANG=1
	AC_DEFINE_UNQUOTED(USE_SLANG,1)
else
	USE_CURSES=1
	AC_DEFINE_UNQUOTED(USE_CURSES,1)
fi
],[
USE_CURSES=1
AC_DEFINE_UNQUOTED(USE_CURSES,1)
])
if test "$USE_CURSES" = "1"
then
	AC_CHECK_LIB(ncurses, initscr)
	if test "$ac_cv_lib_ncurses_initscr" != "yes"
	then
		dnl Check for -lcurses if -lncurses isn't found.
		AC_CHECK_LIB(curses, initscr)
		if test "$ac_cv_lib_curses_initscr" != "yes"
		then
			AC_MSG_ERROR([** You need a curses-compatible library installed.])
		fi
	fi
	AC_CHECK_HEADERS(ncurses.h curses.h,break)
	if test "$ac_cv_header_ncurses_h" != yes -a "$ac_cv_header_curses_h" != yes
	then
		AC_MSG_ERROR([** Can't find ncurses.h or curses.h **])
	fi
	AC_CHECK_HEADERS(termcap.h)
	
	#
	# Check to see if the curses implementation has attr_t defined -- some older
	# versions of GNU curses don't have it.
	#
	AC_MSG_CHECKING(for attr_t in curses)
	HAVE_ATTR_T=no
	AC_TRY_COMPILE([
#include <stdlib.h>
#include <stdio.h>
#ifdef HAVE_NCURSES_H
#include <ncurses.h>
#else
#include <curses.h>
#endif
],[ attr_t testvar; ],[HAVE_ATTR_T=yes])
	if test x$HAVE_ATTR_T = xno ; then
		AC_DEFINE_UNQUOTED(attr_t,int)
	fi
	AC_MSG_RESULT($HAVE_ATTR_T)
else
	AC_CHECK_LIB(slang, SLang_init_tty)
	if test "$ac_cv_lib_slang_SLang_init_tty" != "yes"
	then
		AC_MSG_ERROR([** Can't find -lslang **])
	fi
fi

dnl ** Check for libraries
AC_CHECK_LIB(socket, main)
AC_CHECK_LIB(nsl, main)
 
dnl **
dnl ** Check for OpenSSL include files.
dnl ** They can be in any of a number of standard places.   Most
dnl ** operating systems want them in /usr/include or /usr/local/include,
dnl ** but the default OpenSSL install puts them in
dnl ** ${PREFIX}/ssl/include/openssl
checksslinclude() {
    if test -f "$1/include/openssl/ssl.h"; then
        sslincludedir="-I$1/include"
        return 0
    fi
    return 1
}
AC_MSG_CHECKING([for OpenSSL headers])
AC_ARG_WITH(ssl,[  --with-ssl=DIR          compile support for OpenSSL encryption into emulator],[
if test "$with_ssl" != "no"; then
    if test "$with_ssl" != "yes"; then
         checksslinclude "$with_ssl"
    else
        for topdir in /usr/local /usr /usr/pkg /usr/lib /var/ssl /opt; do
            for subdir in $topdir $topdir/openssl $topdir/ssl; do
                checksslinclude "$subdir" && break 2
            done
        done
     fi
     if test -z $sslincludedir; then
          AC_MSG_ERROR([** Unable to find OpenSSL headers! Specify --with-ssl=DIR to specify a location.])
     fi
fi
],[
      for topdir in /usr/local /usr /usr/pkg /usr/lib /var/ssl /opt; do
          for subdir in $topdir $topdir/openssl $topdir/ssl; do
              checksslinclude "$subdir" && break 2
          done
      done
])
if test -z $sslincludedir; then
     AC_MSG_RESULT([not found])
else
     AC_MSG_RESULT([$sslincludedir])
fi
AC_SUBST(sslincludedir)

dnl **
dnl ** Check for OpenSSL libraries.
dnl ** happily, we don't have to hunt for them thanks to ldconfig!
dnl **
if test -n $sslincludedir; then
     CPPFLAGS="$CPPFLAGS $sslincludedir"
     AC_CHECK_LIB(crypto,CRYPTO_num_locks)
     if test "$ac_cv_lib_crypto_CRYPTO_num_locks" != "yes"
     then
             AC_MSG_ERROR([** Unable to find OpenSSL libraries!])
     fi
     AC_CHECK_LIB(ssl,SSL_library_init)
     if test "$ac_cv_lib_ssl_SSL_library_init" != "yes"
     then
             AC_MSG_ERROR([** Unable to find OpenSSL libraries!])
     fi
fi

dnl **
dnl ** Is OpenSSL going to require Kerberos?
dnl **
dnl ** In RedHat 9 (and who knows where else?) OpenSSL is compiled with
dnl ** kerberos support, and so it has to be able to find the krb5.h
dnl ** file... which naturally isn't in the standard /usr/include dir
dnl ** since that would be much too easy.
dnl **
checkkrb5config() {
   if test -x "$1/krb5-config"; then
       krb5includedir="`$1/krb5-config --cflags`"
       return 0
   fi
   if test -x "$1/bin/krb5-config"; then
       krb5includedir="`$1/bin/krb5-config --cflags`"
       return 0
   fi
   return 1
}
if test -n "$sslincludedir"; then
   AC_MSG_CHECKING([if OpenSSL needs krb5.h])
   needkrb5=yes
   AC_TRY_COMPILE([
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
],[SSL_CTX *ssl_context=NULL;],[needkrb5=no])
   if test $needkrb5 = "yes"; then
       krb5config="`which krb5config 2> /dev/null`"
       if test -z "$krb5config"; then
           krb5config="nonexistent"
       fi
       if test -x "$krb5config"; then
           krb5includedir="`$krb5config --cflags`"
       else
           for topdir in /usr/local /usr /opt /usr/lib /usr/pkg; do
               for subdir in $topdir $topdir/kerberos $topdir/krb5; do
                    checkkrb5config "$subdir" && break 2
               done
           done
       fi
       if test -n $krb5includedir; then
           CPPFLAGS="$CPPFLAGS $krb5includedir"
           needkrb5=no
	   AC_TRY_COMPILE([
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
],[SSL_CTX *ssl_context=NULL;],[needkrb5=yes])
       fi
   fi
   AC_SUBST(krb5includedir)
   AC_MSG_RESULT([$needkrb5])
fi

dnl **
dnl ** --with-extra-libs: a must for debugging.
dnl **
AC_ARG_WITH(extra-libs,[  --with-extra-libs=libs  List of extra libraries to link against.  This is
                          good for linking against a malloc debugger, for
			  example.],[
if test x$with_extra_libs = no
then
	with_extra_libs=""
fi
],[
with_extra_libs=""
])

AC_SUBST(with_extra_libs)

AC_PATH_XTRA

dnl ** Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/ioctl.h sys/filio.h sys/time.h unistd.h slang/slang.h slang.h locale.h)
AC_CHECK_HEADERS(netinet/in.h sys/wait.h fcntl.h syslog.h pwd.h getopt.h)

AC_TYPE_SIGNAL

dnl ** Checks for library functions.
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(setlocale select socket strerror resizeterm)

AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)

dnl * True for anything other than Windoze.
AC_DEFINE_UNQUOTED(SOCKET_TYPE,int)

dnl * Decide whether to use OS-specific directories.
AC_ARG_ENABLE(os-dir,
	[--enable-os-dir=DIR    Also install the OS-specific files in DIR.  If
                         DIR is not given, determine it automatically.  If
                         DIR is 'no', don't install OS-specific files.],
	[], [enable_os_dir=yes])

AC_MSG_CHECKING(for OS specific directory)
SUBDIRS_ADD=
case "$enable_os_dir" in
	freebsd) SUBDIRS_ADD=freebsd ;;
	linux) SUBDIRS_ADD=linux ;;
	yes)
		case "$host_os" in
			freebsd*) SUBDIRS_ADD=freebsd ;;
			linux*) SUBDIRS_ADD=linux ;;
		esac
	;;
esac
AC_MSG_RESULT(${SUBDIRS_ADD:-none})
AC_SUBST(SUBDIRS_ADD)

AC_CONFIG_FILES([Makefile src/Makefile tn5250.spec doc/Makefile linux/Makefile freebsd/Makefile win32/Makefile sun/Makefile tn5250-config xt5250 tn5250.pc])
AC_OUTPUT

