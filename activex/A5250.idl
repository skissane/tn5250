/* 
 * Copyright (C) 2003 Marc-Antoine Ruel at Cardinal Health
 * 
 * This file is part of TN5250
 *
 * TN5250 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1, or (at your option)
 * any later version.
 * 
 * TN5250 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA
 *
 */
// A5250.idl : IDL source for A5250
// This file will be processed by the MIDL tool to
// produce the type library (A5250.tlb) and marshalling code.

#include "olectl.h"
import "oaidl.idl";
import "ocidl.idl";

[
    object,
    uuid(7614C6FA-F77F-4C8A-985B-E0750A5CF370),
    dual,
    //	nonextensible,
    helpstring("ITerm5250 Interface"),
    pointer_default(unique)
]
interface ITerm5250 : IDispatch
{
    //properties:
    [propput, bindable, displaybind, requestedit, id(DISPID_APPEARANCE)]	HRESULT Appearance([in]short nAppearance);
    [propget, bindable, displaybind, requestedit, id(DISPID_APPEARANCE)]	HRESULT Appearance([out, retval]short* pnAppearance);
    [propput, bindable, displaybind, requestedit, id(DISPID_AUTOSIZE)]		HRESULT AutoSize([in]VARIANT_BOOL vbool);
    [propget, bindable, displaybind, requestedit, id(DISPID_AUTOSIZE)]		HRESULT AutoSize([out,retval]VARIANT_BOOL* pbool);
    [propput, bindable, displaybind, requestedit, id(DISPID_BACKCOLOR)]		HRESULT BackColor([in]OLE_COLOR clr);
    [propget, bindable, displaybind, requestedit, id(DISPID_BACKCOLOR)]		HRESULT BackColor([out,retval]OLE_COLOR* pclr);
    [propput, bindable, displaybind, requestedit, id(DISPID_BORDERCOLOR)]	HRESULT BorderColor([in]OLE_COLOR clr);
    [propget, bindable, displaybind, requestedit, id(DISPID_BORDERCOLOR)]	HRESULT BorderColor([out, retval]OLE_COLOR* pclr);
    [propput, bindable, displaybind, requestedit, id(DISPID_BORDERVISIBLE)]	HRESULT BorderVisible([in]VARIANT_BOOL vbool);
    [propget, bindable, displaybind, requestedit, id(DISPID_BORDERVISIBLE)]	HRESULT BorderVisible([out, retval]VARIANT_BOOL* pbool);
    [propput, bindable, displaybind, requestedit, id(DISPID_BORDERWIDTH)]	HRESULT BorderWidth([in]long width);
    [propget, bindable, displaybind, requestedit, id(DISPID_BORDERWIDTH)]	HRESULT BorderWidth([out, retval]long* width);
    [propput, bindable, displaybind, requestedit, id(DISPID_CAPTION), helpstring("Change the bottom caption")]	HRESULT Caption([in]BSTR strCaption);
    [propget, bindable, displaybind, requestedit, id(DISPID_CAPTION)]		HRESULT Caption([out,retval]BSTR* pstrCaption);
    [propput, bindable, displaybind, requestedit, id(DISPID_ENABLED)]		HRESULT Enabled([in]VARIANT_BOOL vbool);
    [propget, bindable, displaybind, requestedit, id(DISPID_ENABLED)]		HRESULT Enabled([out,retval]VARIANT_BOOL* pbool);
    [propput, bindable, displaybind, requestedit, id(DISPID_FORECOLOR)]		HRESULT ForeColor([in]OLE_COLOR clr);
    [propget, bindable, displaybind, requestedit, id(DISPID_FORECOLOR)]		HRESULT ForeColor([out,retval]OLE_COLOR* pclr);
    [propget, bindable, displaybind, requestedit, id(DISPID_HWND)]		HRESULT HWND([out, retval]LONG_PTR* pHWND);
    [propget, bindable, displaybind, requestedit, id(DISPID_READYSTATE), helpstring("Whether it is connected")]		HRESULT ReadyState([out, retval]long* pstate);
    [propget, bindable, displaybind, requestedit, id(1), helpstring("server address")]	HRESULT HostName([out, retval] BSTR* pVal);
    [propput, bindable, displaybind, requestedit, id(1), helpstring("server address")]	HRESULT HostName([in] BSTR newVal);
    [propget, bindable, displaybind, requestedit, id(2), helpstring("Moves the cursor with mouse clicks")] HRESULT MouseMoveCursor([out, retval] VARIANT_BOOL* pVal);
    [propput, bindable, displaybind, requestedit, id(2), helpstring("Moves the cursor with mouse clicks")] HRESULT MouseMoveCursor([in] VARIANT_BOOL newVal);
    [propget, bindable, displaybind, requestedit, id(3)] HRESULT CaretStyle([out, retval] enum ECaretStyle* pVal);
    [propput, bindable, displaybind, requestedit, id(3)] HRESULT CaretStyle([in] enum ECaretStyle newVal);
    //	[propget, bindable, displaybind, requestedit, id(4)] HRESULT Colors([out, retval] OLE_COLOR * Arr[10]);
    //	[propput, bindable, displaybind, requestedit, id(4)] HRESULT Colors([in] const OLE_COLOR Arr[10]);
    [propget, bindable, displaybind, requestedit, id(5), helpstring("Activate the Selection with the mouse")] HRESULT SelectionEnabled([out, retval] VARIANT_BOOL* pVal);
    [propput, bindable, displaybind, requestedit, id(5), helpstring("Activate the Selection with the mouse")] HRESULT SelectionEnabled([in] VARIANT_BOOL newVal);

    //methods:
    [id(100), helpstring("Connect to the host")]		HRESULT Connect();
    [id(101), helpstring("Disconnect from the host")]		HRESULT Disconnect();
    [id(102), helpstring("Send a key to the server")]		HRESULT SendVKey([in] DWORD VKey);
    [id(103), helpstring("method SendChar")]			HRESULT SendChar([in] USHORT Character);
};


[
    uuid(AF9845C2-042D-411F-B6E1-D67693760752),
    version(1.0),
    helpstring("Terminal 5250 1.0")
]
library Term5250Lib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(7EF646BE-F1DD-4fc1-ADF2-0EF3D6B6EA96),
        helpstring("_ITerm5250Events Interface")
    ]
    dispinterface _ITerm5250Events
    {
properties:
methods:
        [id(1), helpstring("method Connected")] void Connected();
        [id(2), helpstring("method Disconnected")] void Disconnected();
    };

    [
        uuid(4F051715-BD6B-4BEF-988A-6F70E7F149FC),
        helpstring("Terminal 5250")
    ]
    coclass Term5250
    {
        [default] interface ITerm5250;
        [default, source] dispinterface _ITerm5250Events;
    };

    enum ECaretStyle
    {
        CARETSTYLE_BLINK,
        CARETSTYLE_LINE,
        CARETSTYLE_NOBLINK
    };
};
